{{ 'section-img-with-text-tab.css' | asset_url | stylesheet_tag }}

<div class="img_with_text_tab_section padding-sider" id="{{ section.settings.spec_id }}">
  <div class="img_with_text_tab" id="img_with_text_tab_section-{{ section.id }}">
    <h2 class="img_with_text_tab_title">{{ section.settings.title }}</h2>
    {% if section.settings.description != blank %}
      <div class="text-body">{{ section.settings.description }}</div>
    {% endif %}
    {% if section.settings.show_tab_head %}
      <div class="img_with_text_tab_head">
        {% for item in section.blocks %}
          <div class="img_with_text_tab_head_item{% if forloop.first %} active{% endif %}">
            {{ item.settings.tabname }}
          </div>
        {% endfor %}
      </div>
    {% endif %}
    <div class="img_with_text_tab_contain swiper {% if section.settings.layout == 'image-right' %} right{% endif %}">
      <div class="swiper-wrapper">
        {% for block in section.blocks %}
          <div class="swiper-slide {% if section.settings.layout == 'image-right' %} right{% endif %}">
            <div class="img_with_text_tab_contain_filebox">
              {% if block.settings.file_type == 'image' and block.settings.file_image != blank %}
                {{-
                  block.settings.file_image
                  | image_url: width: block.settings.file_image.width
                  | image_tag: alt: block.settings.title, class: 'img_with_text_tab_contain_filebox_image'
                -}}
              {% else %}
                {% assign poster_image = blank %}
                {% if block.settings.cover_image != blank %}
                  {% assign poster_image = block.settings.cover_image | image_url: width: 353 %}
                {% endif %}
                {% if block.settings.video_url != blank %}
                  <video
                    autoplay
                    loop
                    muted
                    playsinline
                    preload="none"
                    class="img_with_text_tab_contain_filebox_video"
                    {% if poster_image != blank %}
                      poster="{{ poster_image }}"
                    {% endif %}
                    src="{{ block.settings.video_url }}"
                  ></video>
                {% else %}
                  {{
                    block.settings.url_upload
                    | video_tag:
                      class: 'img_with_text_tab_contain_filebox_video',
                      autoplay: true,
                      loop: true,
                      muted: true,
                      playsinline: true,
                      preload: 'none',
                      poster: poster_image
                  }}
                {% endif %}
              {% endif %}
            </div>
            <div class="img_with_text_tab_contain_info">
              {% if block.settings.sub_title != blank %}
                <div class="img_with_text_simplicity_subtitle">{{ block.settings.sub_title }}</div>
              {% endif %}
              <h3 class="img_with_text_tab_contain_title">{{ block.settings.title }}</h3>
              <div class="img_with_text_tab_contain_desc text-body">{{ block.settings.description }}</div>
              {% if block.settings.btn_text != blank %}
                <a class="nd-btn" href="{{ block.settings.link }}">
                    {{ block.settings.btn_text }}
                    {{ 'icon-right-arrow.svg' | inline_asset_content }}
                </a>
              {% endif %}
            </div>
          </div>
        {% endfor %}
      </div>
      <div class="swiper_btn">
        <div class="img_with_text_tab_swiper_prev">{{- 'swiper-left.svg' | inline_asset_content -}}</div>
        <div class="img_with_text_tab_swiper_next">{{- 'swiper-right.svg' | inline_asset_content -}}</div>
      </div>
    </div>
  </div>
</div>

<script>
  (() => {
    const sectionId = '{{ section.id }}';
    const sectionEl = document.getElementById('img_with_text_tab_section-' + sectionId);
    if (!sectionEl) return;
  
    const tabItems = sectionEl.querySelectorAll('.img_with_text_tab_head_item');
    const swiperEl = sectionEl.querySelector('.swiper');

    const swiperNext = sectionEl.querySelector('.img_with_text_tab_swiper_next');
    const swiperPrev = sectionEl.querySelector('.img_with_text_tab_swiper_prev');
    let img_with_text_tab_swiper;
    img_with_text_tab_swiper = new Swiper(swiperEl, {
      slidesPerView: 1.1,
      spaceBetween: 20,
      navigation: {
        nextEl: swiperNext,
        prevEl: swiperPrev,
      },
      {% if section.settings.autoplay_enable %}
        autoplay: {
          delay: {{ section.settings.autoplay_delay }},
          disableOnInteraction: true
        },
      {% endif %}
      loop: {{ section.settings.loop }},
      on: {
        init: function () {
          // 初始化时统一高度
          {% comment %} equalizeSlideHeights(); {% endcomment %}
        },
        slideChange: function () {
          tabItems.forEach((el, index) => {
            el.classList.remove('active');
            if (index === this.realIndex) {
              el.classList.add('active');
              // 滚动到激活的tab位置
              scrollToActiveTab(el);
            }
          });
        },
      },
      breakpoints: {
        768: {
          slidesPerView: 1,
          spaceBetween: 20,
        },
      }
    });
  
    tabItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        // 停止自动播放
        if (img_with_text_tab_swiper.autoplay) {
          img_with_text_tab_swiper.autoplay.stop();
        }
        
        tabItems.forEach((el) => el.classList.remove('active'));
        item.classList.add('active');
        img_with_text_tab_swiper.slideTo(index);
        
        // 滚动到激活的tab位置
        scrollToActiveTab(item);
      });
    });
    
    // 统一slide高度的函数
    function equalizeSlideHeights() {
      const slides = sectionEl.querySelectorAll('.swiper-slide');
      if (slides.length === 0) return;
      
      // 重置所有slide的高度
      slides.forEach(slide => {
        slide.style.height = 'auto';
      });
      
      // 找到最高的slide
      let maxHeight = 0;
      slides.forEach(slide => {
        const height = slide.offsetHeight;
        if (height > maxHeight) {
          maxHeight = height;
        }
      });
      
      // 设置所有slide为相同高度
      slides.forEach(slide => {
        slide.style.height = maxHeight + 'px';
      });
    }
    
    // 添加滚动到激活tab的函数
    function scrollToActiveTab(activeItem) {
      const tabHead = sectionEl.querySelector('.img_with_text_tab_head');
      if (!tabHead) return;
      
      // 检查是否有横向滚动条（内容宽度超过容器宽度）
      const hasHorizontalScroll = tabHead.scrollWidth > tabHead.clientWidth;
      if (!hasHorizontalScroll) return; // 没有滚动条就不需要滚动
      
      const tabHeadRect = tabHead.getBoundingClientRect();
      const activeItemRect = activeItem.getBoundingClientRect();
      
      // 计算激活tab相对于容器的位置
      const activeItemLeft = activeItemRect.left - tabHeadRect.left;
      const activeItemRight = activeItemRect.right - tabHeadRect.left;
      const containerWidth = tabHeadRect.width;
      
      let targetScrollLeft = tabHead.scrollLeft;
      
      // 如果激活的tab在可视区域左边，滚动到左边对齐
      if (activeItemLeft < 0) {
        targetScrollLeft = tabHead.scrollLeft + activeItemLeft;
      }
      // 如果激活的tab在可视区域右边，滚动到右边对齐
      else if (activeItemRight > containerWidth) {
        targetScrollLeft = tabHead.scrollLeft + (activeItemRight - containerWidth);
      }
      // 如果激活的tab已经在可视区域内，不需要滚动
      else {
        return;
      }
      
      // 确保滚动位置不超出边界
      targetScrollLeft = Math.max(0, Math.min(targetScrollLeft, tabHead.scrollWidth - tabHead.clientWidth));
      
      // 平滑滚动到目标位置
      tabHead.scrollTo({
        left: targetScrollLeft,
        behavior: 'smooth'
      });
    }
    
    // 窗口大小改变时重新计算高度
    window.addEventListener('resize', () => {
      setTimeout(equalizeSlideHeights, 100);
    });
  })();
</script>

{% schema %}
{
  "name": "img with text tab",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "spec_id",
      "label": "specId"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "description"
    },
    {
      "type": "richtext",
      "id": "title",
      "label": "title"
    },
    {
      "type": "checkbox",
      "id": "show_tab_head",
      "label": "Is Show Tab Head",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "Enable loop",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "autoplay_enable",
      "label": "Enable autoplay",
      "default": true
    },
    {
      "type": "number",
      "id": "autoplay_delay",
      "label": "Autoplay delay (ms)",
      "default": 5000
    },
    {
      "type": "select",
      "id": "layout",
      "label": "Layout",
      "options": [
        {
          "value": "image-left",
          "label": "Image Left, Text Right"
        },
        {
          "value": "image-right",
          "label": "Text Left, Image Right"
        }
      ],
      "default": "image-left"
    },
  ],
  "blocks": [
    {
      "type": "tab",
      "name": "tab",
      "settings": [
        {
          "type": "text",
          "id": "tabname",
          "label": "tabname"
        },
        {
          "type": "text",
          "id": "sub_title",
          "label": "sub_title"
        },
        {
          "type": "richtext",
          "id": "title",
          "label": "title"
        },
        {
          "type": "liquid",
          "id": "description",
          "label": "description"
        },
        {
          "type": "radio",
          "id": "file_type",
          "label": "file type",
          "default": "image",
          "options": [
            {
              "value": "image",
              "label": "image"
            },
            {
              "value": "video",
              "label": "video"
            }
          ]
        },
        {
          "type": "image_picker",
          "id": "file_image",
          "label": "file image"
        },
        {
          "type": "image_picker",
          "id": "cover_image",
          "label": "cover image"
        },
        {
          "type": "text",
          "id": "video_url",
          "label": "video url"
        },
        {
          "type": "video",
          "id": "url_upload",
          "label": "video upload"
        },
        {
          "type": "text",
          "id": "btn_text",
          "label": "button text"
        },
        {
          "type": "text",
          "id": "link",
          "label": "link"
        },
      ]
    }
  ],
  "presets": [
    {
      "name": "img with text tab"
    }
  ]
}
{% endschema %}
