{{ 'section-product-anchor-bar.css' | asset_url | stylesheet_tag }}

<div class="product_anchor_bar_section padding-sider">
  <div class="product_anchor_bar">
    <div class="product_anchor_bar_left">
      {% for block in section.blocks %}
        <a
          class="product_anchor_bar_left_item{% if forloop.first %} active{% endif %}"
          href="#{{ block.settings.anchor_name }}"
          data-watch="{{ block.settings.anchor_name }}"
        >
          {{- block.settings.title -}}
        </a>
      {% endfor %}
    </div>
    <button class="product_anchor_bar_btn product_info_buybox_btns_btn nd-btn" data-type="buy_it_now">
      {{ 'common.jetzt_kaufen' | t }}
      {{ 'icon-right-arrow.svg' | inline_asset_content }}
    </button>
  </div>
</div>

<script>
  const links = document.querySelectorAll('.product_anchor_bar_left_item');
  const anchorBarSection = document.querySelector('.product_anchor_bar_section');
  const anchorBarParent = anchorBarSection.parentElement;
  
  // 添加sticky类
  anchorBarParent.classList.add('is-sticky');
  
  // 隐藏主导航
  const header = document.querySelector('header');
  if (header) {
    header.style.display = 'none';
  }
  
  // 监听滚动事件
  let isScrolling = false;
  let scrollTimeout;
  
  function handleScroll() {
    if (isScrolling) return;
    isScrolling = true;
    
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const anchorBarRect = anchorBarSection.getBoundingClientRect();
    const anchorBarTop = anchorBarRect.top + scrollTop;
    
    // 如果滚动到子导航的原始位置或更上方，显示主导航，隐藏子导航
    if (scrollTop <= anchorBarTop) {
      if (header) {
        header.style.display = 'block';
      }
      anchorBarParent.classList.remove('is-sticky');
    } else {
      // 如果滚动超过子导航原始位置，隐藏主导航，显示子导航
      if (header) {
        header.style.display = 'none';
      }
      anchorBarParent.classList.add('is-sticky');
    }
    
    clearTimeout(scrollTimeout);
    scrollTimeout = setTimeout(() => {
      isScrolling = false;
    }, 10);
  }
  
  // 添加滚动监听
  window.addEventListener('scroll', handleScroll, { passive: true });
  
  // 初始化检查
  handleScroll();
  
  links.forEach((item) => {
    item.addEventListener('click', () => {
      if (item.classList.contains('active')) return;
      document.querySelector('.product_anchor_bar_left_item.active').classList.remove('active');
      item.classList.add('active');
    });
  });

  const sectionIds = Array.from(links).map((link) => link.getAttribute('data-watch'));
  let sectionsLoaded = 0;
  let sectionsObserver;
  let sections = [];

  function initializeObserver() {
    sectionIds.forEach((sectionId) => {
      waitForElement(`#${sectionId}`, (element) => {
        sections.push(element);
        sectionsLoaded++;

        if (sectionsLoaded === sectionIds.length) {
          startIntersectionObserver(sections);
        }
      });
    });
  }

  function startIntersectionObserver(sections) {
    sectionsObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const targetSection = entry.target;
          const correspondingLink = document.querySelector(
            `.product_anchor_bar_left_item[data-watch="${targetSection.id}"]`
          );
          if (entry.isIntersecting) {
            links.forEach((link) => link.classList.remove('active'));
            if (correspondingLink) {
              correspondingLink.classList.add('active');
            }
          }
        });
      },
      {
        root: null,
        threshold: 0.9,
      }
    );

    sections.forEach((section) => {
      sectionsObserver.observe(section);
    });
  }

  initializeObserver();

  function waitForElement(selector, callback) {
    const element = document.querySelector(selector);
    if (element) {
      callback(element);
      return;
    }

    const observer = new MutationObserver((mutations, obs) => {
      const element = document.querySelector(selector);
      if (element) {
        obs.disconnect();
        callback(element);
      }
    });

    observer.observe(document.body, { childList: true, subtree: true });
  }
</script>

{% schema %}
{
  "name": "product anchor bar",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [],
  "blocks": [
    {
      "type": "item",
      "name": "item",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "title"
        },
        {
          "type": "text",
          "id": "anchor_name",
          "label": "anchor name"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "product anchor bar"
    }
  ]
}
{% endschema %}
