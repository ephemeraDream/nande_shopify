{{ 'section-product-anchor-bar.css' | asset_url | stylesheet_tag }}

<div class="product_anchor_bar_section padding-sider">
  <div class="product_anchor_bar">
    <div class="product_anchor_bar_left">
      {% for block in section.blocks %}
        <a
          class="product_anchor_bar_left_item{% if forloop.first %} active{% endif %}"
          {% if forloop.first %}
            href="#"
            data-watch="top"
          {% else %}
            href="#{{ block.settings.anchor_name }}"
            data-watch="{{ block.settings.anchor_name }}"
          {% endif %}
        >
          {{- block.settings.title -}}
        </a>
      {% endfor %}
    </div>
    <a class="product_anchor_bar_btn product_info_buybox_btns_btn nd-btn" 
       href="{{ section.settings.button_url | default: '#' }}"
       {% if section.settings.button_target_blank %}target="_blank"{% endif %}>
      {{ section.settings.button_text | default: 'Jetzt kaufen' }}
      {% if section.settings.show_icon %}
        {{ 'icon-right-arrow.svg' | inline_asset_content }}
      {% endif %}
    </a>
  </div>
</div>  

<script>
  
  // 等待DOM加载完成
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAnchorBar);
  } else {
    initAnchorBar();
  }
  
function initAnchorBar() {
    const links = document.querySelectorAll('.product_anchor_bar_left_item');
    
    if (links.length === 0) {
      return;
    }
    
    const anchorBarSection = document.querySelector('.product_anchor_bar_section');
    
    if (!anchorBarSection) {
      return;
    } 
    
    const anchorBarParent = anchorBarSection.parentElement;
  
  // 初始时不添加sticky类，等待滚动触发
  
  // 隐藏主导航（三部分：announcement-bar, header-simple, header-menu）
  const headerSections = document.querySelectorAll('.shopify-section-group-header-group');
  
  // 监听滚动事件
  let isScrolling = false;
  let scrollTimeout;
  let lastScrollTop = 0;
  let anchorBarOriginalTop = 0;
  let isInitialized = false;
  
  function getAnchorBarOriginalTop() {
    if (anchorBarOriginalTop === 0) {
      const rect = anchorBarSection.getBoundingClientRect();
      anchorBarOriginalTop = rect.top + window.pageYOffset;
    }
    return anchorBarOriginalTop;
  }
  
  function handleScroll() {
    if (isScrolling) return;
    isScrolling = true;
    
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const originalTop = getAnchorBarOriginalTop();
    
    // 添加缓冲区域，避免在边界附近闪烁
    const buffer = 10;
    
    // 计算显示锚点导航栏的阈值
    const minThreshold = 280; // 最小阈值200px
    
    // 获取主导航的高度
    let headerHeight = 0;
    if (headerSections.length > 0) {
      headerSections.forEach(section => {
        const rect = section.getBoundingClientRect();
        headerHeight += rect.height;
      });
    }
    
    // 如果锚点导航栏在主导航下面很近，使用主导航高度作为阈值
    const headerThreshold = headerHeight + 50; // 主导航高度 + 50px缓冲
    const showAnchorBarThreshold = Math.max(minThreshold, Math.min(originalTop - 50, headerThreshold));
    
    // 确保在页面顶部时总是显示主导航
    let offset = 0;
    if (scrollTop <= minThreshold) {
      // 在页面顶部，显示主导航，隐藏锚点导航栏
      headerSections.forEach((section, idx) => {
        section.style.position = 'fixed';
        section.style.top = offset + 'px';
        section.style.left = '0';
        section.style.right = '0';
        section.style.transition = 'transform 0.2s ease-in-out';
        section.style.transform = 'translateY(0px)'; // 显示主导航
        offset += section.getBoundingClientRect().height;
      });
      if (anchorBarParent.classList.contains('is-sticky')) {
        anchorBarParent.classList.remove('is-sticky');
      }
    } else {
      // 滚动超过阈值，隐藏主导航，显示锚点导航栏
      // 使用与global.js相同的方式：translateY(-${totalHeight}px)隐藏
      let totalHeight = 0;
      headerSections.forEach(section => {
        totalHeight += section.getBoundingClientRect().height;
      });
      
      let offset = 0;
      headerSections.forEach((section, idx) => {
        section.style.position = 'fixed';
        section.style.top = offset + 'px';
        section.style.left = '0';
        section.style.right = '0';
        section.style.transition = 'transform 0.2s ease-in-out';
        section.style.transform = `translateY(-${totalHeight}px)`; // 隐藏主导航
        offset += section.getBoundingClientRect().height;
      });
      if (!anchorBarParent.classList.contains('is-sticky')) {
        anchorBarParent.classList.add('is-sticky');
      }
    }
    
    lastScrollTop = scrollTop;
    
    clearTimeout(scrollTimeout);
    scrollTimeout = setTimeout(() => {
      isScrolling = false;
    }, 16); // 约60fps
  }
  
  // 添加滚动监听
  window.addEventListener('scroll', handleScroll, { passive: true });
  
  // 初始化检查
  setTimeout(() => {
    // 检查MainContent的margin-top
    {% comment %} const mainContent = document.getElementById('MainContent');
    if (mainContent) {
      const computedStyle = window.getComputedStyle(mainContent);
      const marginTop = parseFloat(computedStyle.marginTop);
      if (marginTop > 50) {
        handleScroll();
      }
    } {% endcomment %}
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      if(scrollTop > 0) {
        handleScroll();
      }
    
  }, 100); 
  
  links.forEach((item) => {
    item.addEventListener('click', (e) => {
      // 如果是第一个链接（回到顶部）
      if (item.getAttribute('data-watch') === 'top') {
        e.preventDefault();
        // 平滑滚动到顶部
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
        return;
      }
      
      if (item.classList.contains('active')) return;
      document.querySelector('.product_anchor_bar_left_item.active').classList.remove('active');
      item.classList.add('active');
    });
  });

  const sectionIds = Array.from(links).map((link) => link.getAttribute('data-watch')).filter(id => id !== 'top');
  let sectionsLoaded = 0;
  let sectionsObserver;
  let sections = [];

  function initializeObserver() {
    sectionIds.forEach((sectionId) => {
      waitForElement(`#${sectionId}`, (element) => {
        sections.push(element);
        sectionsLoaded++;

        if (sectionsLoaded === sectionIds.length) {
          startIntersectionObserver(sections);
        }
      });
    });
  } 

  function startIntersectionObserver(sections) {
    let scrollTimeout;
    
    function updateActiveLink() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      console.log(scrollTop);
      const shouldBeAtTop = scrollTop < 100;
      
      // 移除所有链接的active状态
      links.forEach((link) => link.classList.remove('active'));
      
      if (shouldBeAtTop) {
        // 在顶部，激活第一个链接（回到顶部）
        const firstLink = document.querySelector('.product_anchor_bar_left_item[data-watch="top"]');
        if (firstLink) {
          firstLink.classList.add('active');
        }
      } else {
        // 不在顶部，找到最接近视口中心的section
        const windowHeight = window.innerHeight;
        const viewportCenter = scrollTop + windowHeight / 2;
        
        let closestSection = null;
        let closestDistance = Infinity;
        
        // 检查每个section与视口中心的距离
        sections.forEach((section) => {
          const rect = section.getBoundingClientRect();
          const sectionTop = rect.top + scrollTop;
          const sectionBottom = sectionTop + rect.height;
          const sectionCenter = sectionTop + rect.height / 2;
          
          // 计算section中心与视口中心的距离
          const distance = Math.abs(sectionCenter - viewportCenter);
          
          // 如果section在视口内且距离更近，则选择它
          if (sectionTop <= viewportCenter && sectionBottom >= viewportCenter && distance < closestDistance) {
            closestSection = section;
            closestDistance = distance;
          }
        });
        
        // 激活最接近的section对应的链接
        if (closestSection) {
          const correspondingLink = document.querySelector(
            `.product_anchor_bar_left_item[data-watch="${closestSection.id}"]`
          );
          if (correspondingLink) {
            console.log(scrollTop);
            correspondingLink.classList.add('active');
          }
        }
      }
    }
    
    // 监听滚动事件
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(updateActiveLink, 50);
    }, { passive: true });
    
    // 初始调用
    updateActiveLink();
  }

  initializeObserver();

  function waitForElement(selector, callback) {
    const element = document.querySelector(selector);
    if (element) {
      callback(element);
      return;
    }

    const observer = new MutationObserver((mutations, obs) => {
      const element = document.querySelector(selector);
      if (element) {
        obs.disconnect();
        callback(element);
      }
    });

    observer.observe(document.body, { childList: true, subtree: true });
  }
  
} // 结束 initAnchorBar 函数
</script>

{% schema %}
{
  "name": "product anchor bar",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Jetzt kaufen"
    },
    {
      "type": "url",
      "id": "button_url",
      "label": "Button URL"
    },
    {
      "type": "checkbox",
      "id": "button_target_blank",
      "label": "Open in new tab",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_icon",
      "label": "Show arrow icon",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "item",
      "name": "item",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "title"
        },
        {
          "type": "text",
          "id": "anchor_name",
          "label": "anchor name"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "product anchor bar"
    }
  ]
}
{% endschema %}
