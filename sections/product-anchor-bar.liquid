{{ 'section-product-anchor-bar.css' | asset_url | stylesheet_tag }}

<div class="product_anchor_bar_section padding-sider">
  <div class="product_anchor_bar">
    <div class="product_anchor_bar_left">
      {% for block in section.blocks %}
        <a
          class="product_anchor_bar_left_item{% if forloop.first %} active{% endif %}"
          href="#{{ block.settings.anchor_name }}"
          data-watch="{{ block.settings.anchor_name }}"
        >
          {{- block.settings.title -}}
        </a>
      {% endfor %}
    </div>
    <a class="product_anchor_bar_btn" href="{{ product.url }}">
      {{ 'common.jetzt_kaufen' | t }}
      {{ 'icon-right-arrow.svg' | inline_asset_content }}
    </a>
  </div>
</div>

<script>
  const links = document.querySelectorAll('.product_anchor_bar_left_item');
  document.querySelector('.product_anchor_bar_section').parentElement.classList.add('is-sticky');
  links.forEach((item) => {
    item.addEventListener('click', () => {
      if (item.classList.contains('active')) return;
      document.querySelector('.product_anchor_bar_left_item.active').classList.remove('active');
      item.classList.add('active');
    });
  });
  const sectionIds = Array.from(links).map((link) => link.getAttribute('data-watch'));
  let sectionsLoaded = 0;
  let sectionsObserver;
  let sections = [];

  function initializeObserver() {
    sectionIds.forEach((sectionId) => {
      waitForElement(`#${sectionId}`, (element) => {
        sections.push(element);
        sectionsLoaded++;

        if (sectionsLoaded === sectionIds.length) {
          startIntersectionObserver(sections);
        }
      });
    });
  }

  function startIntersectionObserver(sections) {
    sectionsObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const targetSection = entry.target;
          const correspondingLink = document.querySelector(
            `.product_anchor_bar_left_item[data-watch="${targetSection.id}"]`
          );
          if (entry.isIntersecting) {
            links.forEach((link) => link.classList.remove('active'));
            if (correspondingLink) {
              correspondingLink.classList.add('active');
            }
          }
        });
      },
      {
        root: null,
        threshold: 0.1,
      }
    );

    sections.forEach((section) => {
      sectionsObserver.observe(section);
    });
  }

  initializeObserver();
</script>

{% schema %}
{
  "name": "product anchor bar",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [],
  "blocks": [
    {
      "type": "item",
      "name": "item",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "title"
        },
        {
          "type": "text",
          "id": "anchor_name",
          "label": "anchor name"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "product anchor bar"
    }
  ]
}
{% endschema %}
