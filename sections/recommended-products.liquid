{{ 'section-recommended-products.css' | asset_url | stylesheet_tag }}
{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 767px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}
<div
  class="recommended_products_section padding-sider section-{{ section.id }}-padding"
  id="{{ section.settings.spec_id }}"
>
  <div class="recommended_products">
    <h2 class="recommended_products_title">{{ section.settings.title }}</h2>
    <div class="recommended_products_contain swiper">
      <div class="swiper-wrapper">
        {% for product in section.settings.product_list %}
          <a class="swiper-slide" href="{{ product.url }}">
            <div class="recommended_products_img">
              <img src="{{ product.featured_image | image_url }}" alt="{{ product.title }}">
            </div>
            <div class="recommended_products_info">
              {% assign product_title_top = block.settings.select_product.metafields.custom.product_title_top %}
              <h3 class="product_title_top">
                {% if product_title_top != blank %}
                  {{ product_title_top }}
                {% else %}
                  Maidesite
                {% endif %}
              </h3>
              <h3 class="recommended_products_info_title">{{ product.title }}</h3>
              <div class="recommended_products_info_flex">
                <div class="recommended_products_info_price">
                  {{ product.price | money_without_trailing_zeros }}
                  {% if product.compare_at_price %}
                    <span class="recommended_products_info_price_op">
                      {{- product.compare_at_price | money_without_trailing_zeros -}}
                    </span>
                  {% endif %}
                </div>
                <div
                  class="recommended_products_info_btn"
                  data-value="{{ product.selected_or_first_available_variant.id }}"
                >
                  {{- 'icon-faq-close.svg' | inline_asset_content -}}
                </div>
              </div>
            </div>
          </a>
        {% endfor %}
      </div>
    </div>
    <div class="swiper_btn_white swiper_btn_white_prev recommended_products_prev">
      {{- 'swiper-left.svg' | inline_asset_content -}}
    </div>
    <div class="swiper_btn_white swiper_btn_white_next recommended_products_next">
      {{- 'swiper-right.svg' | inline_asset_content -}}
    </div>
  </div>
</div>

<script>
  (() => {
    new Swiper('.recommended_products_section .swiper', {
      loop: true,
      slidesPerView: 1,
      spaceBetween: 46,
      navigation: {
        nextEl: '.recommended_products_next',
        prevEl: '.recommended_products_prev',
      },
      breakpoints: {
        768: {
          slidesPerView: 2,
        },
        1024: {
          slidesPerView: 3,
        },
        1440: {
          slidesPerView: {{ section.settings.number | json }},
        }
      }
    });

    document.querySelectorAll(".recommended_products .swiper-slide .recommended_products_info_btn").forEach(item => {
      item.addEventListener("click", (e) => {
        e.stopPropagation()
        e.preventDefault()
        const id = item.dataset.value
        const cartFormData = {
          items: [{ id: id, quantity: 1 }],
        };

        const body = JSON.stringify({
          ...cartFormData,
          sections: this.getSectionsToRender().map((section) => section.section),
          sections_url: window.location.pathname,
        });

        fetch(`${routes.cart_add_url}`, { ...fetchConfig(), ...{ body } })
          .then((response) => response.text())
          .then((state) => {
            const parsedState = JSON.parse(state);
            // const sectionIds = ['cart-drawer'];
            // for (const sectionId of sectionIds) {
            //   const htmlString = sections[sectionId];
            //   const html = new DOMParser().parseFromString(htmlString, 'text/html');
            //   const sourceElement = html.querySelector(`${sectionId}`);
            //   const targetElement = document.querySelector(`${sectionId}`);
            //   if (targetElement && sourceElement) {
            //     targetElement.replaceWith(sourceElement);
            //   }
            // }
            if (parsedState.errors) {
              alert(parsedState.errors)
              return
            }
            getSectionsToRender().forEach((section) => {
              const elementToReplace =
                document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);
              elementToReplace.innerHTML = getSectionInnerHTML(
                parsedState.sections[section.section],
                section.selector
              );
            });
            document.body.classList.add('overflow-hidden');
            const theme_cart = document.querySelector('cart-notification') || document.querySelector('cart-drawer');
            if (theme_cart && theme_cart.classList.contains('is-empty')) theme_cart.classList.remove('is-empty');
            setTimeout(() => {
              theme_cart.classList.add('animate', 'active');
            });
          })
          .catch((e) => {
            console.error('Error updating cart sections:', e);
          }).finally(() => {
          });
      })
    })

    function getSectionsToRender() {
      return [
        {
          id: 'CartDrawer',
          section: 'cart-drawer',
          selector: '.drawer__inner',
        },
        {
          id: 'cart-icon-bubble',
          section: 'cart-icon-bubble',
          selector: '.shopify-section',
        },
      ];
    }
  })()
</script>

{% schema %}
{
  "name": "recommended products",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "spec_id",
      "label": "specId"
    },
    {
      "type": "richtext",
      "id": "title",
      "label": "title"
    },
    {
      "type": "product_list",
      "id": "product_list",
      "label": "product list"
    },
    {
      "type": "range",
      "id": "number",
      "min": 3,
      "max": 5,
      "step": 1,
      "label": "show number",
      "default": 3
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 120
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 120
    }
  ],
  "presets": [
    {
      "name": "recommended products"
    }
  ]
}
{% endschema %}
