{{ 'section-product-compare.css' | asset_url | stylesheet_tag }}

<div class="product_compare_section padding-sider">
  <div class="product_compare">
    <h2 class="product_compare_title">{{ section.settings.title }}</h2>
    <div class="product_compare_flex">
      <div class="product_compare_text text-body">{{ section.settings.text }}</div>
      <a class="product_compare_back">
        {{- 'cart-close.svg' | inline_asset_content -}}
      </a>
    </div>
    <div class="wrapper">
      <div class="product_compare_selectbox">
        <select id="productSelectOne" class="product_compare_select">
          {% for product in section.settings.product_list %}
            <option value="{{ product.metafields.custom.product_model.value }}">
              {{- product.metafields.custom.product_model.value }}
            </option>
          {% endfor %}
        </select>
        <select id="productSelectTwo" class="product_compare_select">
          {% for product in section.settings.product_list %}
            <option
              value="{{ product.metafields.custom.product_model.value }}"
              {% if forloop.index0 == 1 %}
                selected
              {% endif %}
            >
              {{- product.metafields.custom.product_model.value }}
            </option>
          {% endfor %}
        </select>
        <select id="productSelectThr" class="product_compare_select">
          {% for product in section.settings.product_list %}
            <option
              value="{{ product.metafields.custom.product_model.value }}"
              {% if forloop.index0 == 2 %}
                selected
              {% endif %}
            >
              {{- product.metafields.custom.product_model.value }}
            </option>
          {% endfor %}
        </select>
      </div>
      <div class="product_compare_contain product_compare_contain_twoline">
        {% for product in section.settings.product_list limit: 3 %}
          <div
            class="product_compare_product{% if forloop.index0 == 0 %} product_compare_product_showtitle{% endif %}"
            data-value="{{ product.metafields.custom.product_model.value }}"
          >
            <div class="product_compare_product_sticky">
              <div class="swiper">
                <div class="swiper-wrapper">
                  {% for option in product.options_with_values %}
                    {%- case option.name -%}
                      {%- when 'Farbe Tischplatte' -%}
                        {% assign index = 'option' | append: forloop.index %}
                        {% for value in option.values %}
                          {% assign first_variant = product.variants | where: index, value | first %}
                          <div class="swiper-slide">
                            <img
                              src="{{ first_variant.featured_image | image_url }}"
                              alt="{{ value.variant.title }}"
                            >
                          </div>
                        {%- endfor %}
                    {%- endcase -%}
                  {%- endfor %}
                </div>
              </div>
              {% comment %}
                <div class="product_compare_item_color">
                  {% for option in product.options_with_values %}
                    {%- case option.name -%}
                      {%- when 'Farbe Tischplatte' -%}
                        {% for value in option.values %}
                          {% assign color = '' %}
                          {% for color_item in product.metafields.custom.color_option.value %}
                            {% if color_item.name == value.name %}
                              {% assign color = color_item.value %}
                            {% endif %}
                          {% endfor %}
                          <div
                            class="product_compare_item_color_circle{% if color == '' %} product_compare_item_color_circle_none{% endif %}"
                            {% if color != '' %}
                              style="background-color: {{ color }}"
                            {% endif %}
                            title="{{ value }}"
                          ></div>
                        {%- endfor %}
                    {%- endcase -%}
                  {%- endfor %}
                </div>
              {% endcomment %}
              <div class="product_compare_item_price">
                {% comment %}
                  {% if block.settings.select_product.compare_at_price != blank %}
                    {% assign price = block.settings.select_product.compare_at_price | money_without_trailing_zeros %}
                  {% else %}
                    {% assign price = block.settings.select_product.price | money_without_trailing_zeros %}
                  {% endif %}
                {% endcomment %}
                {% assign price = product.price | money_without_trailing_zeros %}
                {{ 'products.product.price.from_price_html' | t: price: price }}
              </div>
              <a class="product_compare_product_shop_now" href="{{ product.url }}">
                {{ 'common.en_savoir_plus' | t }}
                {{ 'icon-right-arrow.svg' | inline_asset_content }}
              </a>
            </div>
            {% assign compare_data = product.metafields.custom.compare_simple.value %}
            {% for item in compare_data.data.value %}
              <div class="product_compare_product_card" data-type="{{ item.category | handle }}">
                <div class="product_compare_product_head">{{ item.category }}</div>
                {% for value in item.list %}
                  <div class="product_compare_product_body">
                    <div class="product_compare_product_label">{{ value.label }}</div>
                    <div class="product_compare_product_contain">{{ value.value }}</div>
                  </div>
                {% endfor %}
              </div>
            {% endfor %}
          </div>
        {% endfor %}
      </div>
      <div class="product_compare_contain_other">
        {% for product in section.settings.product_list offset: 3 %}
          <div class="product_compare_product" data-value="{{ product.metafields.custom.product_model.value }}">
            <div class="swiper">
              <div class="swiper-wrapper">
                {% for option in product.options_with_values %}
                  {%- case option.name -%}
                    {%- when 'Farbe Tischplatte' -%}
                      {% assign index = 'option' | append: forloop.index %}
                      {% for value in option.values %}
                        {% assign first_variant = product.variants | where: index, value | first %}
                        <div class="swiper-slide">
                          <img
                            src="{{ first_variant.featured_image | image_url }}"
                            alt="{{ value.variant.title }}"
                          >
                        </div>
                      {%- endfor %}
                  {%- endcase -%}
                {%- endfor %}
              </div>
            </div>
            <div class="product_compare_item_color">
              {% for option in product.options_with_values %}
                {%- case option.name -%}
                  {%- when 'Farbe Tischplatte' -%}
                    {% for value in option.values %}
                      {% assign color = '' %}
                      {% assign color_img = '' %}
                      {% for color_item in product.metafields.custom.color_option.value %}
                        {% if color_item.name == value.name %}
                          {% assign color = color_item.value %}
                          {% assign color_img = color_item.image %}
                        {% endif %}
                      {% endfor %}
                      <div
                        class="product_compare_item_color_circle{% if color == '' %} product_compare_item_color_circle_none{% endif %}"
                        {% if color_img != blank %}
                          style="background: url({{ color_img | image_url }}) no-repeat no-repeat center center"
                        {% elsif color != '' %}
                          style="background-color: {{ color }}"
                        {% endif %}
                        title="{{ value }}"
                      ></div>
                    {%- endfor %}
                {%- endcase -%}
              {%- endfor %}
            </div>
            <div class="product_compare_item_price">
              {% comment %}
                {% if block.settings.select_product.compare_at_price != blank %}
                  {% assign price = block.settings.select_product.compare_at_price | money_without_trailing_zeros %}
                {% else %}
                  {% assign price = block.settings.select_product.price | money_without_trailing_zeros %}
                {% endif %}
              {% endcomment %}
              {% assign price = product.price | money_without_trailing_zeros %}
              {{ 'products.product.price.from_price_html' | t: price: price }}
            </div>
            <a class="product_compare_product_shop_now" href="{{ product.url }}">
              {{ 'common.en_savoir_plus' | t }}
              {{ 'icon-right-arrow.svg' | inline_asset_content }}
            </a>
            {% assign compare_data = product.metafields.custom.compare_simple.value %}
            {% for item in compare_data.data.value %}
              <div class="product_compare_product_card" data-type="{{ item.category | handle }}">
                <div class="product_compare_product_head">{{ item.category }}</div>
                {% for value in item.list %}
                  <div class="product_compare_product_body">
                    <div class="product_compare_product_label">{{ value.label }}</div>
                    <div class="product_compare_product_contain">{{ value.value }}</div>
                  </div>
                {% endfor %}
              </div>
            {% endfor %}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>

<script>
  function unifyComparisonHeightsByType(el) {
    const container = document.querySelector(el);
    const items = container.querySelectorAll('.product_compare_product_card');
    const typeMap = {};

    // 初始化分组
    items.forEach((item) => {
      const type = item.getAttribute('data-type');
      if (!typeMap[type]) typeMap[type] = [];
      item.style.height = 'auto'; // 重置高度避免干扰
      typeMap[type].push(item);
    });

    // 遍历每组，找出最大高度并统一设置
    Object.values(typeMap).forEach((group) => {
      let maxHeight = 0;

      group.forEach((el) => {
        const height = el.offsetHeight;
        if (height > maxHeight) maxHeight = height;
      });

      group.forEach((el) => {
        el.style.height = `${maxHeight}px`;
      });
    });
  }

  const target = document.querySelector('.product_compare');

  if (target) {
    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            unifyComparisonHeightsByType('.product_compare_contain');
            observer.unobserve(target);
          }
        });
      },
      {
        root: null,
        threshold: 0.1,
      }
    );

    observer.observe(target);
  }

  function updateComparisonProduct(selectId, index) {
    const select = document.getElementById(selectId);
    const selectedValue = select.value;

    const containerMain = document.querySelector('.product_compare_contain');
    const containerOther = document.querySelector('.product_compare_contain_other');

    const currentMainItem = containerMain.querySelectorAll('.product_compare_product')[index];
    const newItemInOther = containerOther.querySelector(`.product_compare_product[data-value="${selectedValue}"]`);

    if (!currentMainItem || !newItemInOther || currentMainItem.dataset.value === selectedValue) return;

    // 克隆新旧节点
    const newItemClone = newItemInOther.cloneNode(true);
    const oldItemClone = currentMainItem.cloneNode(true);
    if (index === 0) {
      newItemClone.classList.add('product_compare_product_showtitle');
    } else {
      newItemClone.classList.remove('product_compare_product_showtitle');
    }
    // 替换目标位置的卡片
    containerMain.replaceChild(newItemClone, currentMainItem);
    containerOther.replaceChild(oldItemClone, newItemInOther);

    // 替换后同步高度
    unifyComparisonHeightsByType('.product_compare_contain');

    document.querySelectorAll('.product_compare_contain .product_compare_product').forEach((item, itemIndex) => {
      if (itemIndex === index) {
        const swiperEl = item.querySelector('.swiper');
        const swiper = new Swiper(swiperEl, {
          slidesPerView: 1,
          spaceBetween: 0,
          allowTouchMove: false,
        });
        {% comment %} item.querySelectorAll('.product_compare_item_color_circle').forEach((circle, index) => {
          circle.addEventListener('click', function () {
            swiper.slideTo(index);
          });
        }); {% endcomment %}
      }
    });
  }

  const selectOne = document.getElementById('productSelectOne');
  const selectTwo = document.getElementById('productSelectTwo');
  const selectThr = document.getElementById('productSelectThr');

  function updateDisabledOptions() {
    const valueOne = selectOne.value;
    const valueTwo = selectTwo.value;
    const valueThr = selectThr.value;

    // 清空所有 disabled
    [...selectOne.options].forEach((opt) => (opt.disabled = false));
    [...selectTwo.options].forEach((opt) => (opt.disabled = false));
    [...selectThr.options].forEach((opt) => (opt.disabled = false));

    // 禁用对方选中的值
    [...selectOne.options].forEach((opt) => {
      if (opt.value === valueTwo || opt.value === valueThr) opt.disabled = true;
    });
    [...selectTwo.options].forEach((opt) => {
      if (opt.value === valueOne || opt.value === valueThr) opt.disabled = true;
    });
    [...selectThr.options].forEach((opt) => {
      if (opt.value === valueOne || opt.value === valueTwo) opt.disabled = true;
    });
  }

  // 初始化
  updateDisabledOptions();

  // 监听选择器变化
  selectOne.addEventListener('change', () => {
    updateComparisonProduct('productSelectOne', 0); // 替换第一个
    updateDisabledOptions();
  });

  selectTwo.addEventListener('change', () => {
    updateComparisonProduct('productSelectTwo', 1); // 替换第二个
    updateDisabledOptions();
  });

  selectThr.addEventListener('change', () => {
    updateComparisonProduct('productSelectThr', 2); // 替换第三个
    updateDisabledOptions();
  });

  document.querySelectorAll('.product_compare_contain .product_compare_product').forEach((item) => {
    const swiperEl = item.querySelector('.swiper');
    const swiper = new Swiper(swiperEl, {
      slidesPerView: 1,
      spaceBetween: 0,
      allowTouchMove: false,
    });
    {% comment %} item.querySelectorAll('.product_compare_item_color_circle').forEach((circle, index) => {
      circle.addEventListener('click', function () {
        swiper.slideTo(index);
      });
    }); {% endcomment %}
  });

  document.querySelector('.product_compare_back').addEventListener('click', () => {
    history.back();
  });
</script>

{% schema %}
{
  "name": "product compare",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "richtext",
      "id": "title",
      "label": "title"
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "text"
    },
    {
      "type": "product_list",
      "id": "product_list",
      "label": "product list"
    }
  ],
  "presets": [
    {
      "name": "product compare"
    }
  ]
}
{% endschema %}
